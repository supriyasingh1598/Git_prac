<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule   language="beanshell"  name="LCM Build Identity Approvers">
  <ReferencedRules>
    <Reference class="sailpoint.object.Rule"  name="Approval Library"/>
  </ReferencedRules>
  <Source>
    
       import sailpoint.object.ApprovalSet;
       import sailpoint.object.ProvisioningPlan;
       import sailpoint.object.WorkItem.State;

       //
       // Attributes needed in the rule context: 
       //
       // plan - ProvisioningPlan object 
       //
       // approvalScheme - String indicating how approvals should be generated
       //   none - disabled
       //   manager - the current manager gets the approval
       //   newManager - the current manager if the manager changd
       // 
       // approvalSet - An ApprovalSet representing the "cart"
       //
       // fallbackApprover - String representing who gets the approval
       //                    if we can't resolve one.  
       //
       // identityName - name of the identity being operated on
       //
       // launcher - name of the identity that launched the request
       //
       //
       List approvers = new ArrayList();
       if ( approvalSet != null ) {
           List items = approvalSet.getItems();
           // By default there is one item for all of the edits
           ApprovalItem item = null;
           if ( Util.size(items) > 0 ) 
               item = items.get(0); 

           if ( item != null ) {
               approvers = getApproverNames(approvalScheme, item, plan, identityName);
               if ( approvers != null &amp;&amp; approvers.size() == 0 &amp;&amp; fallbackApprover != null ) {
                   if ( log.isDebugEnabled() ) { 
                       log.debug("Approver could not be resolved using fallbackApprover '"+fallbackApprover+"'.");
                   }
                   approvers.add(fallbackApprover);
               } 
               // If the launcher is an approver remove them from the list
               if ( approvers != null &amp;&amp; approvers.contains(launcher) ) {
                   approvers.remove(launcher);
                   // If this is the only approver automaticaly
                   // mark the item approved.
                   if ( Util.size(approvers) == 0 ) {
                       item.setState(WorkItem.State.Finished);
                       item.setOwner(launcher);
                   }
               }
           }
       }
       return approvers;
    
  </Source>
</Rule>
