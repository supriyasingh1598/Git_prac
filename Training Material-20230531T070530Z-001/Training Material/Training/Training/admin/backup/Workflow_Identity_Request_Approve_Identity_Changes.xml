<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow   name="Identity Request Approve Identity Changes" type="Subprocess">
  <Variable input="true" name="identityName" required="true">
    <Description>
      The name of the identity object being modified.
    </Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      This may be passed in, if not the script queries for this
      using a projection query and falls back to the name.
    </Description>
  </Variable>
  <Variable input="true" name="plan" required="true">
    <Description>The provisioning plan ready to execute.</Description>
  </Variable>
  <Variable initializer="LCM Identity Approval" input="true" name="formTemplate">
    <Description>Name of the form Template to use when building provisioning form.</Description>
  </Variable>
  <Variable input="true" name="approvalSet" output="true">
    <Description>
       This variable includes all ApprovalItems that are part of 
       the request process and is updated during the AfterScript
       of the approval process by assimilating the decisions 
       and comments from the Approvals copy of the ApprovalItem.
    </Description>
  </Variable>
  <Variable input="true" name="approvers">
    <Description>Owners that should recieve the approval.</Description>
  </Variable>
  <Variable input="true" name="approvalScheme">
    <Description>
      A String that specifies how approvals should be generated for 
      this workflow there are five built-in modes

      none - disabled approvals

      manager - The user's current manager will get approvals

      newManager - The newly assigned manager will get approvals when 
                   manager transfers occur. Otherwise the user's manager 
                   current manager will be the approver.
    </Description>
  </Variable>
  <Variable name="approvalForm">
    <Description>The generated form that is displayed to the user during the approval.</Description>
  </Variable>
  <Variable input="true" name="fallbackApprover" required="true">
    <Description>
      A String that specifies the name of the Identity that will 
      be assigned any manual actions  where the owner of the approver 
      can't be resolved. 
    </Description>
  </Variable>
  <Variable initializer="serial" input="true" name="approvalMode">
    <Description>
     A string that specifies how we should handle the approvals.  

     By default this is serial since most of these request with
     the exception of manager transfers will have only one approver.

     parallel
       Approvals are processed concurrently and there must be consensus,
       we wait for all approvers to approve.  The first approver that
       rejects terminates the entire approval.
 
     parallelPoll 
       Approvals are processed concurrently but consensus is not required.
       All approvals will be process, we don't stop if there any
       rejections.  

     serial
       Approvals are processed one at a time and there must be consensus.
       The first approver that rejects terminates the entire approval.

     serialPoll
       Approvals are processed in order but consensus is not required.
       All approvals will be processed, we don't stop if there are any
       rejections.  In effect we are "taking a poll" of the approvers.

     any
      Approvals are processed concurrently, the first approver to 
      respond makes the decision for the group.
    </Description>
  </Variable>
  <Variable input="true" name="policyViolations">
    <Description> 
       List of policy violations that were found during our initial policy scan.
       This list is passed into each work item so the approvers can see 
       pending violations.
    </Description>
  </Variable>
  <Description>
     The subprocess that drives the Create and Update Identity workflows.
     This is different then the Identity Request Approve subprocess because this
     approval process produces a form with the approval so that
     approvers can update values while approving.

     This subprocess builds the form necessary for the editable approvals
     and then assimilates that data entered back to the plan, which 
     can be returned from the subprocess.
  </Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule"  name="Approval Library"/>
    <Reference class="sailpoint.object.Rule"  name="LCM Workflow Library"/>
  </RuleLibraries>
  <Step icon="Start" name="Start">
    <Transition to="Build Approval Form"/>
  </Step>
  <Step action="call:buildPlanApprovalForm" icon="Task" name="Build Approval Form" resultVariable="approvalForm">
    <Arg name="plan" value="ref:plan"/>
    <Arg name="template" value="ref:formTemplate"/>
    <Transition to="Customize Approval Form"/>
  </Step>
  <Step name="Customize Approval Form" resultVariable="approvalForm">
    <Description>
       using the form that was generaed, mMrk the password field read only so approvers 
       can't change it.  Also associate a Rule with the name so name changes during 
       approvals can be validate.
    </Description>
    <Script>
      <Source>
        import sailpoint.object.Field;
        import sailpoint.object.Form;
        import sailpoint.object.Rule;
        import sailpoint.object.Configuration;
        import sailpoint.tools.Util;

        if ( approvalForm != null ) {
            Field passwordField = approvalForm.getField("IIQ:password");
            if ( passwordField != null ) {
                passwordField.setReadOnly(true);
                
                Configuration config = wfcontext.getSailPointContext().getObject(Configuration.class, Configuration.OBJ_NAME);
                boolean requirePassword = Util.atob(config.getString(Configuration.LCM_REQUIRE_PASSWORD_IDENTITY_CREATE));
                passwordField.setRequired(requirePassword);
            }
            Field userId = approvalForm.getField("IIQ:name");
            if ( userId != null ) {
                String ruleName = "LCM Validate Identity Name";
                Rule rule = wfcontext.getSailPointContext().getObject(Rule.class, ruleName);
                if ( rule != null ) {
                    userId.setValidationRule(rule);
                }
            }
            Field manager = approvalForm.getField("IIQ:manager");
            if ( manager != null ) {
                // tell the FormBean to output the value as a name
                // instead of ID which is the default
                manager.addAttribute(Field.ATTR_VALUE_PROPERTY, "name");
            }
        }
        return approvalForm;
      </Source>
    </Script>
    <Transition to="Build Approvers If Necessary" when="script:isNull(approvers)"/>
    <Transition to="Approval"/>
  </Step>
  <Step action="rule:LCM Build Identity Approvers" icon="Task" name="Build Approvers If Necessary" resultVariable="approvers">
    <Description>
      If the approvals weren't passed in then build them up using our 
      default rule.
    </Description>
    <Transition to="Approval"/>
  </Step>
  <Step icon="Approval" name="Approval">
    <Approval mode="ref:approvalMode" owner="ref:approvers" renderer="lcmEditableWorkItemRenderer.xhtml" send="identityDisplayName,identityName,policyViolations,approvalSet">
      <AfterScript>
        <Source>
          import sailpoint.workflow.IdentityRequestLibrary;

          import sailpoint.object.ApprovalSet;
          import sailpoint.object.WorkItem;
          import sailpoint.object.WorkflowCase;
          import sailpoint.object.Form;
          import sailpoint.object.ProvisioningPlan.AttributeRequest;
          import sailpoint.util.GeneralException;

          if (item == null) {
              return;
          }
          // Assimilate all of the approvalItem changes into our gloval
          // approval set
          // 
          ApprovalSet set = (ApprovalSet)item.get("approvalSet");
          if ( set != null ) {
              // Global completion comments will apply to each of the items
              // If there are completion comments append them
              // to any other completion comments, but typically its 
              // one or the other
              String completionComments = item.getCompletionComments();
              Identity id = item.getOwner();
              String ownerName = null;
              if ( id != null ) {
                  ownerName = id.getName();
              }
              approvalSet.assimilate(set, ownerName, completionComments, true);
          } else {
              throw new GeneralException("ApprovalSet not found in afterscript.");
          }
 
          // djs: this is kind of a hack, do I have alternatives?
          // come back to this
          // jsl: Yes, I think you want &lt;Return name='workItemForm' to='approvalForm'/>
          Form form = (Form)item.get("workItemForm");
          if ( form != null ) {
              WorkflowCase c = wfcontext.getWorkflowCase();
              if ( c != null ) {
                  c.put("approvalForm", form);
              }
          }

          // bug#9611 if we notice that the manager request was edited,
          // change the next approval
          if (approvalScheme == null || 
              approvalScheme.contains("manager") ||
              approvalScheme.contains("newManager")) {
              Form form = item.getForm();
              if (form != null) {
                  Field field = form.getField("IIQ:manager");
                  if (field != null) {
                      String newManager = field.getValue();
                      if (newManager != null) {
                          Approval newApproval = null;
                          if (approval != null) {
                              Approval parent = approval.getParent();
                              if (parent != null) {
                                  // find the one after us
                                  List approvals = parent.getChildren();
                                  if (approvals != null) {
                                      Approval prev = null;
                                      for (int i = 0 ; i &lt; approvals.size() ; i++) {
                                          Approval a = (Approval)approvals.get(i);
                                          if (prev == approval) {
                                             newApproval = a;
                                             break;
                                          }
                                          else
                                            prev = a;
                                      }
                                  }
                              }
                          }

                          // newApproval can be null if the user didn't start
                          // with a manager or if the current manager requested
                          // the change
                          if (newApproval != null) {
                              String oldManager = newApproval.getOwner();
                              if (!newManager.equals(oldManager)) {
                                  log.info("Changing new manager approval owner from " + 
                                          oldManger + " to " + newManager);
                                  newApproval.setOwner(newManager);
                              }
                          }
                      }
                  }
              }
          }

          //
          // If they are all rejected mark the Approval Rejected.
          // This allows the Transition to execute once we
          // get a rejection.
          //
          if ( approvalSet.isAllRejected() ) {
              approval.setState(WorkItem.State.Rejected);          
          }

          IdentityRequestLibrary.assimilateWorkItemApprovalSetToIdentityRequest(wfcontext, approvalSet);
          auditWorkItemOwnerHistory(item);
          auditWorkItemComments(item);
          auditDecisions(item);
        </Source>
      </AfterScript>
      <Arg name="workItemRequester" value="$(launcher)"/>
      <Arg name="workItemDescription" value="Account Changes for User: $(identityDisplayName)"/>
      <Arg name="workItemForm" value="ref:approvalForm"/>
      <Arg name="workItemNotificationTemplate" value="LCM Identity Update Approval"/>
      <Arg name="workItemType" value="Approval"/>
    </Approval>
    <Transition to="Assimilate Form Changes"/>
  </Step>
  <Step action="assimilatePlanApprovalForm" icon="Task" name="Assimilate Form Changes" resultVariable="plan">
    <Arg name="form" value="ref:approvalForm"/>
    <Arg name="approvalSet" value="ref:approvalSet"/>
    <Arg name="plan" value="ref:plan"/>
    <Description>
      This step takes the form from the workitem and applys any edits that were
      made back into the plan.
    </Description>
    <Transition to="Check Plan and Update Cart"/>
  </Step>
  <Step icon="Task" name="Check Plan and Update Cart" resultVariable="plan">
    <Description>
      This step takes looks for name changes during creates and updates
      the stub identity on the plan accordingly.
    </Description>
    <Script>
      <Source>
        import sailpoint.object.ApprovalSet;
        import sailpoint.object.ApprovalItem;
        import sailpoint.object.Identity;
        import sailpoint.object.ProvisioningPlan;
        import sailpoint.object.ProvisioningPlan.AccountRequest;
        import sailpoint.object.ProvisioningPlan.AttributeRequest;

        AccountRequest iiq = plan.getAccountRequest(ProvisioningPlan.APP_IIQ);
        if ( iiq != null ) {
            // Look for the name attribute
            boolean nameChanged = false;
            String idName = identityName;
            AttributeRequest name = iiq.getAttributeRequest("name");
            if ( name != null ) {
                String nameStr = Util.otoa(name.getValue());
                if ( nameStr != null ) {
                    // If they don't match this indicates a form
                    // update changes the accountId
                    if ( identityName.compareTo(nameStr) != 0 ) {
                        idName = nameStr; 
                        nameChanged = true;
                         // update the plan with the new/correct account ID
                        iiq.setNativeIdentity(idName);
                    }
                }
            }
            Identity planIdentity = plan.getIdentity();
            if ( ( planIdentity == null ) || ( nameChanged ) ) {
                SailPointContext ctx = wfcontext.getSailPointContext();
                Identity stub = ctx.getObject(Identity.class, idName);
                if ( stub == null ) {
                    stub = new Identity();
                    stub.setName(idName);
                }
                plan.setIdentity(stub);
            }

            //
            // Update the approval item with any changes that 
            // were made during the approval process
            // 
            if ( approvalSet != null ) {
                List approvalItems =  approvalSet.getItems();
                // in the default case there is always just one item for all the changes
                if ( Util.size(approvalItems) == 1 ) { 
                    // Re-flatten the attribute values so they are accurate when auditing changes
                    // and notifying. The values may have been updated in the approvalForm.
                    ApprovalItem item = approvalItems.get(0);
                    List attrRequestFlat = flattenAttributeRequests(iiq.getAttributeRequests());
                    if ( attrRequestFlat != null ) {
                        item.setValue(attrRequestFlat);
                    }
                    if ( nameChanged ) {
                        item.setNativeIdentity(idName);
                    }
                }
            }
        }
        return plan;
      </Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end"/>
</Workflow>
